#!/bin/bash

# Set parameters for the cluster
#PBS -l nodes=1:ppn=20
#PBS -l walltime=12:00:00
#PBS -l mem=60GB
#PBS -l vmem=60GB
#PBS -j oe


# ChIA-PET Tool 2
#         Step 2: Map the reads
# 2017
# The Jackson Laboratory for Genomic Medicine


## The help message:
function usage
{
    echo -e "usage: qsub -F \"--conf CONF --out_dir OUT_DIR --tag_name TAG_NAME\"
    2.map.pbs
    " 
}

## Default values for the arguments
run="LHG0018"
tag_name="none"
genome="hg19"
ctrl_genome="none"
fasta="/data/mzheng/bridge_chiapet/genome/hg19/hg19.fa"
juicer="/projects/tjongh/chiapet_script/encode_singleLinker/\
juicer_tools.1.6.2_linux_jcuda.0.8.jar"
out_dir="/projects/capurd/testing_chia_pet/${run}"
all_steps=true


## Parse arguments from the command line
while [ "$1" != "" ]; do
    case $1 in
        -c | --conf )           shift
                                conf=$1
                                ;;
        -o | --out_dir )        shift
                                out_dir=$1   
                                ;;
        -t | --tag_name )       shift
                                tag_name=$1   
                                ;;
        -h | --help )           usage
                                exit
                                ;;
        * )                     usage
                                exit 1
    esac
    shift
done

## Put output files in subdirectory named after the run
cd ${PBS_O_WORKDIR}
source ${conf}
cd ${out_dir}


# Set mapping parameters and file suffix
if [ ${tag_name} == "singlelinker.single" ]; then
    map_qual=10
    suffix="UxxU"
else
    map_qual=30
    suffix="UU"
fi

# Setting clustering parameters
self_bp=8000
exten_bp=500

## Load required modules
module load pigz
module load java/1.7.0
module load perl/5.26.0

## Create name of the log file
log_file=2.${run}.map_${tag_name}.log

## Print arguments to ensure correct parsing
echo "
Arguments:
    run=${run}
    tag_name=${tag_name}
    genome=${genome}
    ctrl_genome=${ctrl_genome}
    fasta=${fasta}
    juicer=${juicer}
    out_dir=${out_dir}
" >> ${log_file}


#-- perform hybrid bwa-mem and bwa-aln mapping, 
# de-duplication, span computation, and tag clustering --#

## Perform mapping using memaln (hybrid of bwa-mem and bwa-aln)
# Report mapping start
echo "
`date` --- Mapping started for: ---
    ${run} ${tag_name}
" >> ${log_file}

# Mapping
n_thread=20

${bin_dir}/cpu/cpu memaln -T ${map_qual} -t ${n_thread} ${fasta} \
    ${run}.${tag_name}.fastq.gz 1> ${run}.${tag_name}.sam 2>> ${log_file}

# Compress files
pigz -p 4 ${run}.${tag_name}.sam >> ${log_file}

# Report mapping completion
echo -e "`date` --- Mapping completed ---\n" >> ${log_file}

## Pair the tags
# Report pairing start
echo -e "`date` --- Pairing paired tags ---\n" >> ${log_file}

# Pairing
${bin_dir}/cpu/cpu pair -S -q ${map_qual} -t ${n_thread} -s ${self_bp} \
    ${run}.${tag_name}.sam.gz \
    1>${run}.${tag_name}.stat.xls 2>> ${log_file}

# Report pairing completion
echo -e "`date` --- ENDED ${run} cpu pair ---\n" >> ${log_file}

## Compute the span of the paired tags
# Report span computation start
echo -e "`date` --- Computing span of paired tags ---\n" >> ${log_file}

# Span computation
${main_prog} span -g -t ${n_thread} -s ${self_bp} \
    ${run}.${tag_name}.${suffix}.bam 2>> ${log_file} \
    1>${run}.${tag_name}.${suffix}.span.xls

# Report span computation completion
echo -e "`date` --- ENDED ${run} span pair --\n" >> ${log_file}


## Deduplicate the paired tags
# Report tag deduplication start
echo -e "`date` --- De-duplicating paired tags ${suffix} ---\n" >> ${log_file}

# Tag deduplication
${main_prog} dedup -g -t ${n_thread} -s ${self_bp} \
    ${run}.${tag_name}.${suffix}.bam \
    1> ${run}.${tag_name}.${suffix}.dedup.lc 2>> ${log_file}

# Remove intermediary file
rm ${run}.${tag_name}.${suffix}.cpu.dedup 2>> ${log_file}

# Report tag deduplication completion
echo -e "`date` --- ENDED ${run} cpu dedup ---" >> ${log_file}

## Compute the span of the non-redundant tags
# Report non-redundant span computation start
echo -e "`date` --- Computing span of paired tags ${suffix} nr ---\n" \
    >> ${log_file}

# Non-redundant span computation
${main_prog} span -t ${n_thread} -s ${self_bp} \
    ${run}.${tag_name}.${suffix}.nr.bam \
    2>> ${log_file} 1>${run}.${tag_name}.${suffix}.nr.span.xls

# Report non-redundant span computation completion
echo -e "`date` --- ENDED ${run} cpu dedup span ---\n" >> ${log_file}

# Report completion of mapping
echo "$0 done" >> 2.${run}.map_${tag_name}.done
echo "$0 done" >> ${log_file}
echo "`date`" >> ${log_file}


# Submit next step in the pipeline
if [ ${all_steps} == true ] && [ ${tag_name} == "singlelinker.paired" ]
then
    while [ ! -f 2.${run}.map_singlelinker.single.done ]
    do
        sleep 1
    done
    
    while [ ! -f 2.${run}.map_none.done ]
    do
        sleep 1
    done
    
    # Set the resource parameters for the computing cluster
    # depending on the run type (miseq or hiseq)
    n_thread=20
    mem=60
    
    if [ ${run_type} == "miseq" ]
    then
        wall_time=5
    elif [ ${run_type} == "hiseq" ] || [ ${run_type} == "nextseq" ]
    then
        wall_time=10
    else
        wall_time=20
    fi

    ### 3. Make visualization files
    # Submit the job
    job_3=$( qsub -F "--conf ${conf} --out_dir ${out_dir}" \
    -l nodes=1:ppn=${n_thread},mem=${mem}gb,vmem=${mem}gb,walltime=${wall_time}:00:00 \
    -j oe -o ${out_dir}/3.${run}.make_visualization_files.o \
    ${bin_dir}/3.make_visualization_files.pbs )
fi
