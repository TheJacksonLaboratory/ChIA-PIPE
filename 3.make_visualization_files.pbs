#!/bin/bash

# Set parameters for the cluster
#PBS -l nodes=1:ppn=20
#PBS -l walltime=12:00:00
#PBS -l mem=60GB
#PBS -l vmem=60GB
#PBS -j oe


# ChIA-PET Tool 2
#         Step 3: Make the visualization files
# 2017
# The Jackson Laboratory for Genomic Medicine


## The help message:
function usage
{
    echo -e "usage: qsub -F \"--conf CONF --out_dir OUT_DIR\"
    3.make_visualization_files.pbs
    " 
}

## Default values for the arguments
run="LHG0018"
tag_name="none"
genome="hg19"
ctrl_genome="none"
fasta="/data/mzheng/bridge_chiapet/genome/hg19/hg19.fa"
juicer="/projects/tjongh/chiapet_script/encode_singleLinker/\
juicer_tools.1.6.2_linux_jcuda.0.8.jar"
out_dir="/projects/capurd/testing_chia_pet/${run}"
all_steps=true


## Parse arguments from the command line
while [ "$1" != "" ]; do
    case $1 in
        -c | --conf )           shift
                                conf=$1
                                ;;
        -o | --out_dir )        shift
                                out_dir=$1   
                                ;;
        -h | --help )           usage
                                exit
                                ;;
        * )                     usage
                                exit 1
    esac
    shift
done

## Put output files in subdirectory named after the run
cd ${PBS_O_WORKDIR}
source ${conf}
cd ${out_dir}


# Set mapping parameters and file suffix
if [ ${tag_name} == "singlelinker.single" ]; then
    map_qual=10
    suffix="UxxU"
else
    map_qual=30
    suffix="UU"
fi

# Setting clustering parameters
self_bp=8000
exten_bp=500

## Load required modules
module load pigz
module load java/1.7.0
module load perl/5.26.0

## Create name of the log file
log_file=3.${run}.make_visualization_files.log

## Print arguments to ensure correct parsing
echo "
Arguments:
    run=${run}
    tag_name=${tag_name}
    genome=${genome}
    ctrl_genome=${ctrl_genome}
    fasta=${fasta}
    juicer=${juicer}
    out_dir=${out_dir}
" >> ${log_file}

### Cluster tags for browser-based visualization of loops
# 500bp extension and 8kb self-ligation
exten_bp=500
self_bp=8000

echo -e "`date` --- STARTED ${run} clustering with ${exten_bp} bp"\
    "extension from each side --- \n" >> ${log_file}

${bin_dir}/cpu/cpu cluster -m -s ${self_bp} -B 1000 -5 5,0 -3 3,${exten_bp} \
    -t ${n_thread} -j -x -v 1 -g  -O ${run}.e500 \
    ${run}.singlelinker.paired.UU.nr.bam 1>> ${log_file} 2>> ${log_file}

echo -e "`date` --- ENDED ${run} cpu clustering --- \n" >> ${log_file}


### Make 2D heat map files for Juicebox and Higlass
## Multi-resolution .hic file for Juicebox
echo -e "`date` --- STARTED ${run} making Juicebox file --- \n" >> ${log_file}

java -Xmx32g -jar ${juicer} pre -r \
    2500000,1000000,500000,250000,100000,50000,25000,10000,5000,1000 \
    ${run}.e500.juice.gz ${run}.hic ${genome}

echo -e "`date` --- ENDED ${run} making Juicebox file --- \n" >> ${log_file}

## Make intermediate .Pairs file for HiGlass
# Generate .pairs file
echo -e "`date` --- STARTED ${run} making Pairs file --- \n" >> ${log_file}

perl ${bin_dir}/juicer_shortform2pairs.pl \
    ${run}.e500.juice.gz ${chrom_sizes} ${run}.e500.cooler

# Index .pairs file
${bin_dir}/pairix -f ${run}.e500.cooler.bsorted.pairs.gz

echo -e "`date` --- ENDED ${run} making Pairs file --- \n" >> ${log_file}

## Make multi-resolution .Cool file for Higlass
echo -e "`date` --- STARTED ${run} making Cool file --- \n" >> ${log_file}

# Minimum resolution for HiGlass
resolution=1000

# Divide chromosomes into bins
${bin_dir}/conda/bin/cooler makebins \
   ${chrom_sizes} \
   ${resolution} \
   > ${out_dir}/temp_chrom_bins.bed

# Make .cool file (1000bp resolution)
${bin_dir}/conda/bin/cooler cload pairix -p 20\
   ${out_dir}/tmp_chrom_bins.bed \
   ${out_dir}/${run}.e500.cooler.bsorted.pairs.gz \
   ${out_dir}/${run}.e500.higlass.cool

# Make final, multi-resolution .cool file (with zooming ability)
${bin_dir}/conda/bin/cooler zoomify -p 20\
   --no-balance ${out_dir}/${run}.e500.higlass.cool

# Remove intermediary file
rm ${out_dir}/temp_chrom_bins.bed
rm ${out_dir}/${run}.e500.higlass.cool
        
echo -e "`date` --- ENDED ${run} making Cool file --- \n" >> ${log_file}

### Make bedgraph for browser-based visualization of coverage
if [ ! -f ${run}.for.BROWSER.bam ]
then
    echo -e "`date` Converting file formats..\n" >> ${log_file}
    samtools sort -@ 16 ${run}.singlelinker.paired.UU.nr.bam \
        ${run}.singlelinker.paired.UU.nr.sorted
    samtools sort -@ 16 ${run}.singlelinker.single.UxxU.nr.bam \
        ${run}.singlelinker.single.UxxU.nr.sorted
    samtools sort -@ 16 ${run}.none.UU.nr.bam ${run}.none.UU.nr.sorted

    samtools merge ${run}.for.BROWSER.bam \
        ${run}.singlelinker.paired.UU.nr.sorted.bam \
        ${run}.singlelinker.single.UxxU.nr.sorted.bam \
        ${run}.none.UU.nr.sorted.bam
        
    echo -e "`date` Making bedgraph file..\n" >> ${log_file}
    
    bedtools genomecov -ibam ${run}.for.BROWSER.bam \
        -bg > ${run}.for.BROWSER.bedgraph
    
    echo -e "`date` Removing intermediate files..\n" >> ${log_file}
    
    ## Remove redundant BAMs
    # BAMs of reads with no linker
    rm -f ${run}.none.*.bam
    
    # BAMs of reads with only one usable tag
    rm -f ${run}.singlelinker.single.*.bam
    
    # For reads with two tags, save only the final
    # deduplicated and sorted BAM file
    ls ${run}.singlelinker.paired.*.bam | grep -v "sorted" | xargs rm
    
    # Remove FASTQ files of linker filtering
    rm -f ${run}.*.fastq.gz
    
    # Remove SAM files
    rm -f ${run}.*.sam.gz
    
fi

echo "$0 done" >> ${log_file}

    
# Set the resource parameters for the computing cluster
# depending on the run type (miseq or hiseq)
n_thread=20
mem=60

if [ ${run_type} == "miseq" ]
then
    wall_time=5
elif [ ${run_type} == "hiseq" ] || [ ${run_type} == "nextseq" ]
then
    wall_time=10
else
    wall_time=20
fi

### 4. Peak calling
# Submit the job
job_4=$( qsub -F "--conf ${conf} --out_dir ${out_dir}" \
-l nodes=1:ppn=${n_thread},mem=${mem}gb,vmem=${mem}gb,walltime=${wall_time}:00:00 \
-j oe -o ${out_dir}/4.${run}.call_peaks.o \
${bin_dir}/4.call_peaks.pbs )

